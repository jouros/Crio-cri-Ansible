---
- hosts: master1 
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
    CRIO_VERSION: "1.19"
    OS: "Debian_10"
  tasks:
  - name: Update package list
    apt:
      update_cache: yes
    register: task_result
    until: task_result is success
    retries: 20
    delay: 2

  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
    register: task_result
    until: task_result is success
    retries: 20
    delay: 2
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gpg-agent
      - software-properties-common
      - jq
      - nfs-common
      - golang-go
      - acct
      - gnupg
      - libseccomp-dev
      - conntrack

  - name: Add CRIO repos
    shell: |
      echo "deb [trusted=yes] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ OS }}/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
      echo "deb [trusted=yes] http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ CRIO_VERSION }}/{{ OS }}/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.list 
      apt-key adv --keyserver hkp://pool.sks-keyservers.net:80 --recv-keys 4D64390375060AA4
      apt-key adv --keyserver hkp://pool.sks-keyservers.net:80 --recv-keys 4D64390375060AA4

  - name: Update apt1
    copy:
      src: Apt/99defaultrelease
      dest: /etc/apt/apt.conf.d/
      owner: root
      group: root
      mode: '0440'

  - name: Update apt2
    copy:
      src: Apt/stable.list
      dest: /etc/apt/sources.list.d/
      owner: root
      group: root
      mode: '0440'

  - name: Update apt3
    copy:
      src: Apt/testing.list
      dest: /etc/apt/sources.list.d/
      owner: root
      group: root
      mode: '0440'

  - name: Update cache again
    apt:
      update_cache: yes
    register: task_result
    until: task_result is success
    retries: 20
    delay: 2

  - name: Prerequiste for using cri-o with Kubernetes
    shell: |
      modprobe overlay
      modprobe br_netfilter
      cat > /etc/sysctl.d/99-kubernetes-cri.conf <<EOF
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      EOF
      sysctl --system

  - name: Add latest libseccomp2
    shell: |
      /usr/bin/apt-get -t testing install -y libseccomp2

  - name: Install CRIO and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
    register: task_result
    until: task_result is success
    retries: 20
    delay: 2
    vars:
      packages:
      - cri-o 
      - cri-tools
      - cri-o-runc
    notify:
      - crio status

  - name: Set conmon PATH
    shell: |
      sed -i 's#conmon = ""#conmon = "/usr/libexec/podman/conmon"#' /etc/crio/crio.conf

  - name: Set CRIO Prometheus metrics
    copy:
      src: "01-metrics.conf"
      dest: "/etc/crio/crio.conf.d/"
      owner: "root"
      group: "root"
      mode: "0644"

  - name: Restart CRIO 
    systemd:
      name: crio
      state: restarted
      enabled: yes
      daemon_reload: yes

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt:
      name: "{{ packages }}"
      state: present
    register: task_result
    until: task_result is success
    retries: 20
    delay: 2
    vars:
      packages:
        - kubelet
        - kubeadm
        - kubectl

  - name: Upload custom KUBELET_EXTRA_ARGS
    copy:
      src: "kubelet"
      dest: "/etc/default/"
      owner: "root"
      group: "root"
      mode: "0644"

# Reset is needed if you re-install cluster 
#  - name: Reset kubeadm
#    command: kubeadm reset --force
#    register: kube_reset
#
#  - debug: var=kube_reset.stdout_lines

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --node-name master1 --pod-network-cidr=10.244.0.0/16 
    register: kube_init

  - debug: var=kube_init.stdout_lines

  - name: Setup kubeconfig for joro user
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/joro/.kube
     - cp -i /etc/kubernetes/admin.conf /home/joro/.kube/config
     - chown joro:joro /home/joro/.kube/config

  - name: Install Flannel pod network
    become: false
    shell: kubectl apply -f "https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"
    register: flannel 

  - debug: var=flannel.stdout_lines

  - name: Generate join command 
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    become: no
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

  - name: Copy cgroups conf
    copy:
      src: "11-cgroups.conf"
      dest: "/etc/systemd/system/kubelet.service.d/"
      owner: root
      group: root
      mode: "0644"

  - name: Restart kubelet and do daemon-reload to pick up config changes
    systemd:
      name: kubelet 
      state: restarted
      enabled: yes
      daemon_reload: yes

  handlers:
    - name: crio status
      service: name=crio state=started
...
